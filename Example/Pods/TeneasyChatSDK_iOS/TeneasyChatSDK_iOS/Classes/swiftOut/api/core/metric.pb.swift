// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api/core/metric.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 客服指标
public struct Api_Core_WorkerMetric {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 3分钟回复率, 万分比
  /// 即: 9950 = 99.50%
  public var replyPercent3Min: Int32 = 0

  /// 今日咨询人数
  public var todayService: Int32 = 0

  /// 平均响应时长
  public var avgReplyInterval: Int32 = 0

  /// 转任务数
  public var transferTo: Int32 = 0

  /// 接任务数
  public var transferFrom: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Api_Core_QuerySelfResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var metric: Api_Core_WorkerMetric {
    get {return _metric ?? Api_Core_WorkerMetric()}
    set {_metric = newValue}
  }
  /// Returns true if `metric` has been explicitly set.
  public var hasMetric: Bool {return self._metric != nil}
  /// Clears the value of `metric`. Subsequent reads from it will return its default value.
  public mutating func clearMetric() {self._metric = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _metric: Api_Core_WorkerMetric? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Api_Core_WorkerMetric: @unchecked Sendable {}
extension Api_Core_QuerySelfResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "api.core"

extension Api_Core_WorkerMetric: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WorkerMetric"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "reply_percent_3_min"),
    2: .standard(proto: "today_service"),
    3: .standard(proto: "avg_reply_interval"),
    4: .standard(proto: "transfer_to"),
    5: .standard(proto: "transfer_from"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.replyPercent3Min) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.todayService) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.avgReplyInterval) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.transferTo) }()
      case 5: try { try decoder.decodeSingularInt32Field(value: &self.transferFrom) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.replyPercent3Min != 0 {
      try visitor.visitSingularInt32Field(value: self.replyPercent3Min, fieldNumber: 1)
    }
    if self.todayService != 0 {
      try visitor.visitSingularInt32Field(value: self.todayService, fieldNumber: 2)
    }
    if self.avgReplyInterval != 0 {
      try visitor.visitSingularInt32Field(value: self.avgReplyInterval, fieldNumber: 3)
    }
    if self.transferTo != 0 {
      try visitor.visitSingularInt32Field(value: self.transferTo, fieldNumber: 4)
    }
    if self.transferFrom != 0 {
      try visitor.visitSingularInt32Field(value: self.transferFrom, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_WorkerMetric, rhs: Api_Core_WorkerMetric) -> Bool {
    if lhs.replyPercent3Min != rhs.replyPercent3Min {return false}
    if lhs.todayService != rhs.todayService {return false}
    if lhs.avgReplyInterval != rhs.avgReplyInterval {return false}
    if lhs.transferTo != rhs.transferTo {return false}
    if lhs.transferFrom != rhs.transferFrom {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Api_Core_QuerySelfResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".QuerySelfResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "metric"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._metric) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._metric {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Api_Core_QuerySelfResponse, rhs: Api_Core_QuerySelfResponse) -> Bool {
    if lhs._metric != rhs._metric {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
